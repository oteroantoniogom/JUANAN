import logging
from strands.tools import tool

# Import agent instances from agents.py
# These will be called by the orchestrator's tools
from agents import (
    agent_planner,
    agent_clasificacion,
    agent_segmentacion,
    agent_rag,
    agent_grafico,
    agent_reportes,
    agent_validador
)

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

@tool
def invoke_planner_agent(user_request: str) -> str:
    """Invokes the Planner agent to get a plan for the user request.
    Args:
        user_request (str): The user's request or task description.
    Returns:
        str: The plan generated by the Planner agent as a string.
    """
    logger.info(f"Orchestrator Tool: Invoking Planner Agent with request: {user_request[:100]}...")
    if not agent_planner:
        logger.error("Orchestrator Tool: AgentPlanner not initialized.")
        return "ERROR: AgentPlanner not initialized."
    try:
        response = agent_planner(user_request) # Strands Agent is callable
        logger.info(f"Orchestrator Tool: Planner Agent response:\n{response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Planner Agent: {e}", exc_info=True)
        return f"ERROR: Failed to invoke Planner Agent: {str(e)}"

@tool
def invoke_classification_agent(task_input: str) -> str:
    """Invokes the Classification agent.
    Args:
        task_input (str): Input for the classification agent, typically patient_id or image_path.
    Returns:
        str: JSON string with classification result or error.
    """
    logger.info(f"Orchestrator Tool: Invoking Classification Agent with input: {task_input}")
    if not agent_clasificacion:
        logger.error("Orchestrator Tool: AgentClasificacion not initialized.")
        return "{\"error\": \"AgentClasificacion not initialized.\"}"
    try:
        response = agent_clasificacion(task_input)
        logger.info(f"Orchestrator Tool: Classification Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Classification Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke Classification Agent: {str(e)}"}}'    

@tool
def invoke_segmentation_agent(task_input: str) -> str:
    """Invokes the Segmentation agent (stub).
    Args:
        task_input (str): Input for the segmentation agent.
    Returns:
        str: JSON string from the stub agent.
    """
    logger.info(f"Orchestrator Tool: Invoking Segmentation Agent (stub) with input: {task_input}")
    if not agent_segmentacion:
        logger.error("Orchestrator Tool: AgentSegmentacion not initialized.")
        return "{\"error\": \"AgentSegmentacion not initialized.\"}"
    try:
        response = agent_segmentacion(task_input)
        logger.info(f"Orchestrator Tool: Segmentation Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Segmentation Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke Segmentation Agent: {str(e)}"}}'    

@tool
def invoke_rag_agent(task_input: str) -> str:
    """Invokes the RAG agent (stub).
    Args:
        task_input (str): Input for the RAG agent.
    Returns:
        str: JSON string from the stub agent.
    """
    logger.info(f"Orchestrator Tool: Invoking RAG Agent (stub) with input: {task_input}")
    if not agent_rag:
        logger.error("Orchestrator Tool: AgentRAG not initialized.")
        return "{\"error\": \"AgentRAG not initialized.\"}"
    try:
        response = agent_rag(task_input)
        logger.info(f"Orchestrator Tool: RAG Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking RAG Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke RAG Agent: {str(e)}"}}'    

@tool
def invoke_grafico_agent(task_input: str) -> str:
    """Invokes the Grafico agent (stub).
    Args:
        task_input (str): Input for the Grafico agent.
    Returns:
        str: JSON string from the stub agent.
    """
    logger.info(f"Orchestrator Tool: Invoking Grafico Agent (stub) with input: {task_input}")
    if not agent_grafico:
        logger.error("Orchestrator Tool: AgentGrafico not initialized.")
        return "{\"error\": \"AgentGrafico not initialized.\"}"
    try:
        response = agent_grafico(task_input)
        logger.info(f"Orchestrator Tool: Grafico Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Grafico Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke Grafico Agent: {str(e)}"}}'    

@tool
def invoke_reportes_agent(task_input: str) -> str:
    """Invokes the Reportes agent.
    Args:
        task_input (str): Input for the Reportes agent, possibly paths to files to compile or data.
    Returns:
        str: JSON string from the reportes agent.
    """
    logger.info(f"Orchestrator Tool: Invoking Reportes Agent with input: {task_input}")
    if not agent_reportes:
        logger.error("Orchestrator Tool: AgentReportes not initialized.")
        return "{\"error\": \"AgentReportes not initialized.\"}"
    try:
        response = agent_reportes(task_input)
        logger.info(f"Orchestrator Tool: Reportes Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Reportes Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke Reportes Agent: {str(e)}"}}'    

@tool
def invoke_validator_agent(task_input: str) -> str:
    """Invokes the Validador Reportes agent (stub).
    Args:
        task_input (str): Input for the Validador, typically path to the report file.
    Returns:
        str: JSON string from the stub agent.
    """
    logger.info(f"Orchestrator Tool: Invoking Validator Agent (stub) with input: {task_input}")
    if not agent_validador:
        logger.error("Orchestrator Tool: AgentValidadorReportes not initialized.")
        return "{\"error\": \"AgentValidadorReportes not initialized.\"}"
    try:
        response = agent_validador(task_input)
        logger.info(f"Orchestrator Tool: Validator Agent response: {response}")
        return response
    except Exception as e:
        logger.error(f"Orchestrator Tool: Error invoking Validator Agent: {e}", exc_info=True)
        return f'{{"error": "Failed to invoke Validator Agent: {str(e)}"}}'    

if __name__ == '__main__':
    # This block is for testing the invoker tools. 
    # It requires that agents are initialized. 
    # For a real test, you'd need to ensure the models in config.py are loaded.
    
    print("Testing Orchestrator Agent Tools (Agent Invokers)...")
    
    # Test Planner Invoker
    print("\n--- Testing invoke_planner_agent ---")
    plan = invoke_planner_agent("Test request: classify patient X and generate a report.")
    print(f"Plan received:\n{plan}")

    # Test Classification Invoker (will likely use dummy/error from classify_tumor_tool if not fully set up)
    print("\n--- Testing invoke_classification_agent ---")
    classification_result = invoke_classification_agent("dummy_patient_id_for_test")
    print(f"Classification result: {classification_result}")

    # Test Segmentation Invoker (Stub)
    print("\n--- Testing invoke_segmentation_agent (Stub) ---")
    segmentation_result = invoke_segmentation_agent("input_for_segmentation")
    print(f"Segmentation result: {segmentation_result}")

    # Test Reportes Invoker (Stub/Tool-based)
    print("\n--- Testing invoke_reportes_agent ---")
    # This will call the agent_reportes which has file tools.
    # For a simple test, we're just passing a string. 
    # The agent_reportes prompt guides it to return a stub JSON if it can't do full compilation.
    report_result = invoke_reportes_agent("Compile data from file1.txt and file2.txt into final_report.txt")
    print(f"Reportes result: {report_result}")

    # Test Validator Invoker (Stub)
    print("\n--- Testing invoke_validator_agent (Stub) ---")
    validation_result = invoke_validator_agent("path/to/final_report.txt")
    print(f"Validation result: {validation_result}")

    print("\nOrchestrator Agent Tools test finished.") 